import { FilterQuery, Model, Types } from "mongoose";
import { Logger, NotFoundException } from "@nestjs/common";

import { AbstractDocument } from "./abstract.schema";

// TDocument can be any name represmating any kind of document (user,...)
export abstract class AbstractRepository<TDocument extends AbstractDocument>{
    // logger needs to be implemented by child classes
    protected abstract readonly logger: Logger;

    constructor(protected readonly model: Model<TDocument>) { }

    // _id will not be provided but autogenerated before given document is
    // inserted in DB
    async create(document: Omit<TDocument, '_id'>): Promise<TDocument> {
        const createDocument = new this.model({
            ...document,
            _id: new Types.ObjectId(),
        });

        // toJSON filters out non-required monogoose functionality/props
        // needs to be cast, required document type will always be returned
        return (await createDocument.save()).toJSON() as unknown as TDocument;
    }

    async findOne(filterQuery: FilterQuery<TDocument>): Promise<TDocument> {
        // lean returns plain JS object, instead of hydrated mongoose object
        // returning plain JS object inceases performant
        const document = await this.model.findOne(filterQuery, {}, { lean: true });

        if (!document) {
            this.logger.warn('Document not found with filterQuery >>> ', filterQuery);
            throw new NotFoundException('Document not found!');
        }

        return document;
    }

    async find(filterQuery: FilterQuery<TDocument>) {
        return this.model.find(filterQuery, {}, { lean: true });
    }
}